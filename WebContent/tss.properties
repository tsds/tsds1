# Root directory of the dataset descriptors (NcML).
# The "dataset" portion of the request URL is relative to this.
# Default to the top of the web content for the webapp.
dataset.dir = datasets

# Server version info.
server.tss = TSS/1.0
server.dods = DODS/2.0

##############################################################################
# Properties for defining how requests will be handled.
# Based on the dataset suffix in the request URL.
#
#   writer.<suffix>.class:  Implementation of the Writer interface to use for the given suffix.
#
# If a "description" property is given, that option will be displayed on the help page.
#

# Standard DAP output. 
writer.das.class = lasp.tss.writer.DasWriter
writer.das.description = Standard OPeNDAP Dataset Attribute Structure (DAS), ASCII

writer.dds.class = lasp.tss.writer.DdsWriter
writer.dds.description = Standard OPeNDAP Dataset Descriptor Structure (DDS), ASCII

writer.dods.class = lasp.tss.writer.DataDdsWriter
writer.dods.description = Standard OPeNDAP data output as defined by the Data Access Protocol (DAP), binary

writer.html.class = lasp.tss.writer.HtmlFormWriter
writer.html.description = Web interface to the data set, HTML

writer.info.class = lasp.tss.writer.InfoWriter
writer.info.description = Information about the data set, ASCII

# Special OPeNDAP Writers
writer.help.class = lasp.tss.writer.HelpWriter
writer.error.class = lasp.tss.writer.ErrorWriter
writer.version.class = lasp.tss.writer.VersionWriter

# THREDDS Catalog
writer.thredds.class = lasp.tss.writer.ThreddsCatalogWriter

# Default ASCII output
writer.asc.class = lasp.tss.writer.FormattedAsciiWriter
writer.asc.description = Default ASCII output.
writer.asc.header = lasp.tss.writer.SimpleHeader
writer.asc.delimiter = ,\ 
writer.asc.selected = selected
#writer.ascii.class

# Flat Binary 
writer.bin.class = lasp.tss.writer.BinWriter
writer.bin.description = IEEE 64-bit floats, little-endian

# Same format as "bin" but sacrifices filtering for speed.
writer.fbin.class = lasp.tss.writer.FastBinWriter
writer.fbin.description = Same format as "bin" but faster. One variable only. Time slicing only.

# Comma Separated Values
writer.csv.class  = lasp.tss.writer.FormattedAsciiWriter
writer.csv.description = ASCII comma separated values
writer.csv.header = lasp.tss.writer.SimpleHeader

# Tabular, always one row per time sample
writer.dat.class = lasp.tss.writer.FormattedAsciiWriter
writer.dat.flatten = true
writer.dat.delimiter = \ 
writer.dat.description = Space delimited ASCII tabular output with Sequence variables flattened to a single row.

# JavaScript Object Notation
writer.json.class = lasp.tss.writer.JsonWriter
#writer.json.description = JavaScript Object Notation (JSON), ASCII

# Output IDL code to read the requested data.
writer.pro.class = lasp.tss.writer.IDLWriter
#writer.pro.description = IDL code

# Output a PNG image of a time series plot
#writer.png.class = lasp.tss.writer.PngWriter
#writer.png.description = PNG image

##############################################################################
# Filter properties: Map filter names to the implementing Filter class.
#
filter.stride.class = lasp.tss.filter.StrideFilter
filter.stride.description = stride(n), return every nth time sample

filter.thin.class = lasp.tss.filter.ThinFilter
filter.thin.description = thin(n), apply a stride to return about n time samples

filter.replace.class = lasp.tss.filter.ReplacementFilter
filter.replace.description = replace(a,b), replace any occurrence of the value a with b

filter.replace_missing.class = lasp.tss.filter.ReplaceMissingValueFilter
filter.replace_missing.description = replace_missing(a), replace missing values with the value a

filter.exclude_missing.class = lasp.tss.filter.ExcludeMissingValueFilter
filter.exclude_missing.description = exclude_missing(), exclude any time sample that has a missing value

filter.format_time.class = lasp.tss.filter.TimeFormatFilter
filter.format_time.description = format_time(format), format ASCII time output, see java.text.SimpleDateFormat

#
